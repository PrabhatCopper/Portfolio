/*!
 * Build for: Copper Mobile, Inc.
 * About: Parallax is a displacement or difference in the apparent position of an object viewed along two different lines of sight,
 * and is measured by the angle or semi-angle of inclination between those two lines.
 * ==================================================================================
 * Method:
 *
 * Dependencies:
 * 		[1] TweenMax
 * 		[2] EasePack
 * 		[3] Animation Frame
 * 		[4] SuperScrollOrama
 * 		[5] Lettering
 * 		[6] Detect Browser
 * 			by: Prabhat Kumar [Date: 01:32 PM 8/May/2014]
 */
/*==========================================================================================*/
/*						[Desktop Function # Version beta]									*/
/*==========================================================================================*/
var portfolio = portfolio || {};

function doDesktop(){
	var controller = $.superscrollorama();
	var sections = (function(){
		this.theNeed = {
			selector: $("#the-need"),
			pinAt: Math.round($("#the-need").offset().top),
			pinDur: 679,
			animation: new TimelineLite()
		};
		this.theChallenge = {
			selector: $("#the-challenge"),
			pinAt: Math.round($("#the-challenge").offset().top),
			pinDur: 1200, /*1200*/
			animation: new TimelineLite()
		};
		this.theSolution = {
			selector: $("#the-solution"),
			pinAt: Math.round($("#the-challenge").offset().top),
			pinDur: 1029, /*999*/
			animation: new TimelineLite()
		};
		return this;
	})();
	/*==========================================================================================*/
	/*	[The Need Section]	*/
	/*==========================================================================================*/
	/*[for Background Image]*/
	/*[Note: Height of Image is 900px]*/
	// massive lagging fixed!
	var need = function(){
		if(bowser.firefox || bowser.webkit){
			var point = Math.round(sections.theNeed.selector.offset().top + 264);
				controller.addTween(point,
					TweenMax.fromTo(sections.theNeed.selector.find(".banner > img.desktop"), 600, {
						css:{top:0,opacity:1}
					},{
						css:{top:-479,opacity:0.9},ease:Circ.easeInOut
					},139),900);
					controller.pin(
						sections.theNeed.selector,
						sections.theNeed.pinDur,{
							anim:sections.theNeed.animation,
							offset:-49,
							onUnpin:function(){
								console.log("The Need Section is done.");
							}
					});
		}
		/*if(bowser.webkit){
			var point = Math.round(sections.theNeed.selector.offset().top + 279);
				controller.addTween(point,
					TweenMax.fromTo(sections.theNeed.selector.find(".banner > img.desktop"), 600, {
						css:{top:0,opacity:1}
					},{
						css:{top:-479,opacity:0.9},ease:Circ.easeInOut
					},109),900);
					controller.pin(
						sections.theNeed.selector,
						sections.theNeed.pinDur,{
							anim:sections.theNeed.animation,
							offset:-49,
							onUnpin:function(){
								console.log("The Need Section is done.");
							}
					});
		}*/
	};
	/*==========================================================================================*/
	/*		[The Challenge Section]		*/
	/*==========================================================================================*/	
	var challenge = function(){
		if(bowser.firefox){
			var challengeSlide = sections.theChallenge.selector.find("li");
			for(var i=0; i < challengeSlide.length; i++){
				var startPoint = Math.round(sections.theChallenge.selector.offset().top + 629) + (i * 120);/* + (i * (209 + 120)*/
				var li = challengeSlide.eq(i);
				var h4 = li.find("h4");
				var h5 = li.find("h5");
				var ring = li.find(".progress-icon .ring");
				var icon = li.find(".progress-icon .icon");
				/*[for faceOut]*/
				var faceOut = -440;
				
				controller.addTween(startPoint,TweenMax.to(challengeSlide.eq(i), 0.5,{display:'block'}, 320), 379);
				
				if(i === 0){
					// to initialize slide(s)
					controller.addTween((startPoint + 179),
						TweenMax.to(challengeSlide.eq(i), 0.5,{
							display:'block'
						}, 320), 379);
					// for H4
					controller.addTween((startPoint + 279),
						TweenMax.to(h4, 0.5,{
							marginLeft:faceOut,opacity:0
						}, 320), 379);
					// for H5
					controller.addTween((startPoint + 279),
						TweenMax.to(h5, 0.5,{
							marginRight:faceOut,opacity:0
						}, 320), 379);
					// for Ring
					controller.addTween((startPoint + 259),
						TweenMax.to(ring, 0.5,{
							opacity:0,zIndex:i * 3
						}, 320), 379);
					// for Icon
					controller.addTween((startPoint + 259),
						TweenMax.to(icon, 0.5,{
							scale:0,opacity:0,zIndex:i * 4
						}, 320), 379);
						
						
						
						
						
						
						
						
						
						
						
						
				} else if(i === challengeSlide.length - 1){
					// for list
					controller.addTween((startPoint + 358),
						TweenMax.to(li, 0.5, {
							opacity: 1,
							zIndex: i * 3
						}, 320), 379);
						
						
			// for H4
			controller.addTween((startPoint + 358),
				TweenMax.fromTo(h4, 0.5,{
					marginLeft:faceOut,opacity:0
				},{
					marginLeft:0,opacity:1
				}, 320), 379);
			// for H5
			controller.addTween((startPoint + 358),
				TweenMax.fromTo(h5, 0.5,{
					marginRight:faceOut,opacity:0
				},{
					marginRight:0,opacity:1
				}, 320), 379);
			// for Ring
			controller.addTween((startPoint + 358),
				TweenMax.to(ring, 0.5, {
					opacity:1,zIndex:i * 3
				}, 320), 379);
			// for Icon
			controller.addTween((startPoint + 358),
				TweenMax.fromTo(icon, 0.5, {
					scale:0,opacity:0,zIndex:i * 4
				},{
					scale:1, opacity:1
				}, 320), 379);
			
			
			
			
			
			/* for Ending-Trail */
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(challengeSlide.parents("section").find(".ending-trail"), 1.75, {
					bottom: -179,
					opacity: 0,
					ease:Bounce.easeInOut
				},{
					bottom: -19,
					opacity: 1,
					ease:Bounce.easeInOut
				},129), 579);
		} else {
			
			
			
			
			
			
			// for list
			controller.addTween((startPoint + 179),
				TweenMax.to(li, 1.0, {
					opacity: 1,
					zIndex: i * 3
				}, 120), 379);
			// for H4
			controller.addTween((startPoint + 179),
				TweenMax.fromTo(h4, 0.5, {
					marginLeft:faceOut,opacity:0
				},{
					marginLeft:0,opacity:1
				}, 120), 379);
			// for H5
			controller.addTween((startPoint + 179),
				TweenMax.fromTo(h5, 0.5, {
					marginRight:faceOut,opacity:0
				},{
					marginRight:0,opacity:1
				}, 120), 379);
			// for Ring
			controller.addTween((startPoint + 179),
				TweenMax.to(ring, 0.5, {
					opacity:1,zIndex:i * 3
				}, 120), 379);
			// for Icon
			controller.addTween((startPoint + 179),
				TweenMax.fromTo(icon, 0.5, {
					scale:0,opacity:1,zIndex:i * 4
				},{
					scale:1,opacity:0
				}, 120), 379);
		}
	}
	/* To Pin and after UnPin Method */
	controller.pin(
		sections.theChallenge.selector,
		sections.theChallenge.pinDur,{
			anim: sections.theChallenge.animation,
			offset: -49,
			/*onPin: function(){
				sections.theChallenge.selector.css('height',579).css('margin-top',100);
			},*/
			onUnpin: function(){
				sections.theChallenge.selector.css('height',579)/*.css('margin-top',-100)*/;
				console.log("The Challenge Section is done.");
			}
	});
		}
		/*[for WebKit Engine]*/
		if(bowser.webkit){
			var challengeSlide = sections.theChallenge.selector.find("li");
			for(var i=0; i < challengeSlide.length; i++){
				var startPoint = Math.round(sections.theChallenge.selector.offset().top) + (i * 209);
				var li = challengeSlide.eq(i);
				var h4 = li.find("h4");
				var h5 = li.find("h5");
				var ring = li.find(".progress-icon .ring");
				var icon = li.find(".progress-icon .icon");
				/*[for faceOut]*/
				var faceOut = -440;
				
				controller.addTween(startPoint,TweenMax.to(challengeSlide.eq(i), 0.4,{display:'block'},200),379);
				
				if(i === 0){
					// to initialize slide(s)
					controller.addTween((startPoint),
						TweenMax.to(challengeSlide.eq(i), 0.5,{
					display:'block'
				}, 200), 379);
			// for H4
			controller.addTween((startPoint + 279),
				TweenMax.to(h4, 0.5,{
					marginLeft:faceOut,opacity:0
				}, 200), 379);
			// for H5
			controller.addTween((startPoint + 279),
				TweenMax.to(h5, 0.5,{
					marginRight:faceOut,opacity:0
				}, 200), 379);
			// for Ring
			controller.addTween((startPoint + 389),
				TweenMax.to(ring, 0.5,{
					opacity:0,zIndex:i * 3
				}, 200), 379);
			// for Icon
			controller.addTween((startPoint + 389),
				TweenMax.to(icon, 0.5,{
					scale:0,opacity:0,zIndex:i * 4
				}, 200), 379);			
		} else if(i === challengeSlide.length - 1){
			// for list
			controller.addTween((startPoint + 389),
				TweenMax.to(li, 0.5, {
					opacity: 1,
					zIndex: i * 3
				},200), 379);
			// for H4
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(h4, 0.5,{
					marginLeft:faceOut,opacity:0
				},{
					marginLeft:0,opacity:1
				}, 200), 379);
			// for H5
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(h5, 0.5,{
					marginRight:faceOut,opacity:0
				},{
					marginRight:0,opacity:1
				}, 200), 379);
			// for Ring
			controller.addTween((startPoint + 389),
				TweenMax.to(ring, 0.5, {
					opacity:1,zIndex:i * 3
				}, 200), 379);
			// for Icon
			controller.addTween((startPoint + 389),
				TweenMax.fromTo(icon, 0.5, {
					scale:0,opacity:0,zIndex:i * 4
				},{
					scale:1, opacity:1
				}, 200), 379);			
			/* for Ending-Trail */
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(challengeSlide.parents("section").find(".ending-trail"), 1.75, {
					bottom: -179,
					opacity: 0,
					ease:Bounce.easeInOut
				},{
					bottom: -19,
					opacity: 1,
					ease:Bounce.easeInOut
				},129), 579);
		} else {
			// for list
			controller.addTween((startPoint + 389),
				TweenMax.to(li, 1.0, {
					opacity: 1,
					zIndex: i * 3
				},200), 379);
			// for H4
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(h4, 0.5, {
					marginLeft:faceOut,opacity:0
				},{
					marginLeft:0,opacity:1
				}, 200), 379);
			// for H5
			controller.addTween((startPoint + 279),
				TweenMax.fromTo(h5, 0.5, {
					marginRight:faceOut,opacity:0
				},{
					marginRight:0,opacity:1
				}, 200), 379);
			// for Ring
			controller.addTween((startPoint + 389),
				TweenMax.to(ring, 0.5, {
					opacity:1,zIndex:i * 3
				}, 200), 379);
			// for Icon
			controller.addTween((startPoint + 389),
				TweenMax.fromTo(icon, 0.5, {
					scale:0,opacity:1,zIndex:i * 4
				},{
					scale:1,opacity:0
				}, 200), 379);
		}
	}
	/* To Pin and after UnPin Method */
	controller.pin(
		sections.theChallenge.selector,
		sections.theChallenge.pinDur,{
			anim: sections.theChallenge.animation,
			offset: -49,
			/*onPin: function(){
				sections.theChallenge.selector.css('height',579).css('margin-top',100);
			},*/
			onUnpin: function(){
				sections.theChallenge.selector.css('height',579)/*.css('margin-top',-100)*/;
				console.log("The Challenge Section is done.");
			}
	});
		}
	};
	
	
	
	/*==========================================================================================*/
	/*		[The Solution Section]		*/
	/*==========================================================================================*/
	var solution = function(){
		if(bowser.firefox || bowser.webkit){
			var solutionSlide = sections.theSolution.selector.find("li");
			var duration = 111;
			var reverseDuration = 51;
			
			function doScroll(){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").attr("title","Change Slides from here...");
					elm.on("click touchstart",function(e){
						e.preventDefault();
						if(e.type == "click"){
							n = $(this).prop('href').split('#')[1];
								$(window).scrollTop(parseInt(n) + 300);
								return false;
						} else if(e.type == "touchstart"){
							n = $(this).prop('href').split('#')[1];
								$(window).scrollTop(parseInt(n) + 300);
								return false;
						}
					});
					return true;
			}
			function setScrollPoint(n,i){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").eq(i);
					elm.prop('href','#' + n);
			}
			function onEnterFrame(index){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").eq(index);
					elm.parents(".solution-slide-nav").find("a.active").removeClass("active");
						if(!elm.hasClass("active")){
							elm.addClass("active");
						}
			}
			for(j = 0; j < solutionSlide.length; j++){
				var startPoint = Math.round(sections.theSolution.selector.offset().top + 1479) + (j * 179);
				var li = solutionSlide.eq(j);
				var background = li.find(".slide-bg");
				var iPad = li.find(".slide-img");
				var line = li.find(".seprator");
				var para = li.find("p");
				var trap = li.find(".trap");
				var elm = li.parents("section").find(".solution-slide-nav > a");
				
				setScrollPoint((startPoint + 69.01) + duration, j);
				
				if(j===0){
					onEnterFrame(j);
				}
				
				controller.addTween((startPoint + 379),TweenMax.from(trap, 0.75,{opacity:0,onUpdate:onEnterFrame,onUpdateParams:[j]}), duration);
				
				if(j!==0){
					controller.addTween((startPoint + 379),TweenMax.from(background, 0.75,{opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(iPad, 0.75,{marginLeft:-440,opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(line, 0.75,{marginLeft:-440,opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(para, 0.75,{marginRight:-440,opacity:0}), duration);
				}
				if(j!==solutionSlide.length - 1){
					controller.addTween((startPoint + 379),TweenMax.to(background, 0.75,{opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(iPad, 0.75,{marginLeft:-440,opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(line, 0.5,{marginLeft:-440,opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(para, 0.5,{marginRight:-440,opacity:0}), reverseDuration, 119);
				}
			}
			doScroll();
			/*[ To Pin and after UnPin Method] */
			controller.pin(
				sections.theSolution.selector,
				sections.theSolution.pinDur,{
					anim:sections.theSolution.animation,
					offset:-49,
					onPin:function(){
						sections.theSolution.selector.css('height',579);
						console.log("The Solution Section is done.");
					},
					pushFollowers:true
				});
		}
		/**/
		/*if(bowser.webkit){
			var solutionSlide = sections.theSolution.selector.find("li");
			var duration = 111;
			var reverseDuration = 51;
			
			function doScroll(){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").attr("title","Change Slides from here...");
					elm.on("click touchstart",function(e){
						e.preventDefault();
						if(e.type == "click"){
							n = $(this).prop('href').split('#')[1];
								$(window).scrollTop(parseInt(n) + 300);
								return false;
						} else if(e.type == "touchstart"){
							n = $(this).prop('href').split('#')[1];
								$(window).scrollTop(parseInt(n) + 300);
								return false;
						}
					});
					return true;
			}
			function setScrollPoint(n,i){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").eq(i);
					elm.prop('href','#' + n);
			}
			function onEnterFrame(index){
				var elm = sections.theSolution.selector.find(".solution-slide-nav > a").eq(index);
					elm.parents(".solution-slide-nav").find("a.active").removeClass("active");
					if(!elm.hasClass("active")){
						elm.addClass("active");
					}
			}
			for(j = 0; j < solutionSlide.length; j++){
				var startPoint = Math.round(sections.theSolution.selector.offset().top + 1379) + (j * 179);
				var li = solutionSlide.eq(j);
				var background = li.find(".slide-bg");
				var iPad = li.find(".slide-img");
				var line = li.find(".seprator");
				var para = li.find("p");
				var trap = li.find(".trap");
				var elm = li.parents("section").find(".solution-slide-nav > a");
				
				setScrollPoint((startPoint + 69.01) + duration, j);
				
				if(j===0){
					onEnterFrame(j);
				}
				
				controller.addTween((startPoint + 379),TweenMax.from(trap, 0.75,{opacity:0,onUpdate:onEnterFrame,onUpdateParams:[j]}), duration);
				
				if(j!==0){
					controller.addTween((startPoint + 379),TweenMax.from(background, 0.75,{opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(iPad, 0.75,{marginLeft:-440,opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(line, 0.75,{marginLeft:-440,opacity:0}), duration);
					controller.addTween((startPoint + 379),TweenMax.from(para, 0.75,{marginRight:-440,opacity:0}), duration);
				}
				if(j!==solutionSlide.length - 1){
					controller.addTween((startPoint + 379),TweenMax.to(background, 0.75,{opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(iPad, 0.75,{marginLeft:-440,opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(line, 0.5,{marginLeft:-440,opacity:0}), reverseDuration, 119);
					controller.addTween((startPoint + 379),TweenMax.to(para, 0.5,{marginRight:-440,opacity:0}), reverseDuration, 119);
				}
			}
			doScroll();
			controller.pin(
				sections.theSolution.selector,
				sections.theSolution.pinDur,{
					anim:sections.theSolution.animation,
					offset:-49,
					onPin:function(){
						sections.theSolution.selector.css('height',579);
						console.log("The Solution Section is done.");
					},
					pushFollowers:true
				});
		}*/
	};	
	need();
	challenge();
	solution();
}
/* Build Date: 9:59 PM 6/May/2014 */
/* Update Date: 1:46 PM 8/May/2014 */
